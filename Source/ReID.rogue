#===============================================================================
# ReID.rogue
# 2020-05-17 by Abe Pralle
#===============================================================================
$define VERSION "2.0"
$define DATE    "September 13, 2022"

$requireRogue "2.0.9"

uses Console/CommandLineParser

ReID()

class ReID
  PROPERTIES
    command : Value
    options = @{}

    changes : Changes

  METHODS
    method init
      command = CommandLineParser().
      [
        option( "--content", &alias="-c" )
        option( "--exact",   &alias="-e" )
        option( "--exclude",
          function( parser:CommandLineParser )
            if (parser.arg.contains("="))
              if (not parser.command//excluded) parser.command//excluded = @[]
              parser.command//excluded.add( parser.arg.after_first('=') )
            else
              parser.cur_group = "excluded"
            endIf
          endFunction, &alias="-x", &require_value
        )
        option( "--grep",      &alias="-g"          )
        option( "--help",      &aliases=["-h","-?"] )
        option( "--ignore=",   &alias="-i", &multi  )
        option( "--filepaths", &alias="-f"          )
        option( "--partial" )
        option( "--package" )
        option( "--partial", &alias="-p" )
        option( "--plain" )
        option( "--auto_response=" )
        alias( "--save", "--auto_response=s" ), alias( "-s", "--save" )
        alias( "--yes",  "--auto_response=y" ), alias( "-y", "--yes" )
        option( "--rename-cmd=" )
      ].parse( System.command_line_arguments )

      options = command//options

      if (not command//excluded) command//excluded = @[]
      command//excluded.add( "ReIDChanges.txt" )

      if (not (options//content or options//filepaths))
        options//content = true
        options//filepaths = true
      endIf

      local args = command//args.to_list<<String>>
      if (args.count > 0 and options//grep)
        # duplicate first arg as second arg
        args.insert( args.first )
      endIf

      which (args.count)
        case 0
          print_usage
          System.exit

        case 1
          if (File(args.first).is_folder)
            throw Error( ''Expected a change list but "$" is a folder.'' (args.first) )
          endIf
          changes = Changes( File(args.first), options )
          changes.preview_and_apply

        others
          if (args.count == 2) args.add( "**" )

          local filepaths = Set<<String>>()
          forEach (pattern in args.subset(2))
            if (pattern.contains('*') or pattern.contains('?'))
              forEach (filepath in File(".").listing(FilePattern(pattern),&ignore_hidden))
                contingent
                  necessary (FilePattern(filepath) != (forEach in command//excluded)->String)
                  filepaths.add( filepath )
                endContingent
              endForEach
            elseIf (File(pattern).is_folder)
              forEach (filepath in File(pattern).listing("**",&ignore_hidden))
                contingent
                  necessary (FilePattern(filepath) != (forEach in command//excluded)->String)
                  filepaths.add( filepath )
                endContingent
              endForEach
            else
              filepaths.add( pattern )
            endIf
          endForEach

          collect_changes( args[0], args[1], filepaths.to_list )
      endWhich

    method print_usage
      println "ReID v$"(VERSION)
      println "$ by Abe Pralle"(DATE)
      println @|
               |USAGE
               |  reid [options] OldID NewID           [wildcard_filepaths] [--exclude] [...]
               |  reid old/folder/path new/folder/path [wildcard_filepaths] [--exclude] [...]
               |  reid old$pattern new$pattern         [wildcard_filepaths] [--exclude] [...]
               |  reid ReIDChanges.txt
               |
               |OPTIONS
               |  reid OldID NewID [wildcard_filepaths]
               |    Accepts IDs in any of the following capitalization styles and automatically
               |    generates the other style variations for ID replacement:
               |      OldID  -> NewID
               |      oldID  -> newID
               |      Old_ID -> New_ID
               |      old_id -> new_id
               |      OLD_ID -> NEW_ID
               |      oldid  -> newid
               |    Using the given input filepath(s) (or "**" - all files and subfolders in
               |    the current folder), ReID then generates and displays a list of changes it
               |    will make to the content of the files and the filepath names. The user can
               |    then proceed with the changes immediately or save them to an intermediate
               |    file for editing (e.g. "ReIDChanges.txt"), then running
               |    "reid ReIDChanges.txt".
               |
               |  reid old/folder/path new/folder/path [wildcard_filepaths]
               |    When slashes are present in the search term, ReID replaces only exact
               |    matches, which are most often folder paths.
               |
               |  reid old$pattern new$pattern [wildcard_filepaths]
               |    Uses Rogue's String.replacing_pattern() syntax. Use single quotes to prevent
               |    '$' being escaped by the shell. Examples:
               |      reid '$ and $' '$ & $'        # Alice and Bob -> Alice & Bob
               |      reid '$ and $' '$(1) & $(0)'  # Alice and Bob -> Bob & Alice
               |
               |  reid ReIDChanges.txt
               |    When ReID is run, the previewed changes are saved to a file, and the file
               |    is edited to further adjust the changes, then run `reid <filename>` to
               |    read and then apply those edited changes.
               |
               |  --content, -c
               |    Applies replacements to file content only, not to filenames or folder paths.
               |    If neither '--content' or '--filepaths' are specified then both are implied.
               |
               |  --exact, -e
               |    The search term is used exactly without added automatic variations.
               |
               |  --exclude=<filepattern>, -x <filepattern>
               |    Any files matching the given pattern are skipped.
               |
               |  --exclude [...]
               |    Files matching any wildcard patterns coming after '--exclude' are skipped.
               |    For example:
               |      --exclude "**/*.backup" "Build/**"
               |
               |    Note: binary files as well as the default change description output file,
               |    "ReIDChanges.txt" are excluded by default.
               |
               |  --filepaths, -f
               |    Applies replacements to filepaths only, not to file content. If neither
               |    '--content' nor '--filepaths' are specified then both are implied.
               |
               |  --grep, -g
               |    Search for the given IDs or patterns without making changes.
               |    Only one ID or pattern should be supplied instead of the usual two.
               |    Matching lines can be saved, edited, and applied using ReID.
               |
               |  --help, -h, -?
               |    Display this help text.
               |
               |  --ignore=<pattern>, -i <pattern>
               |    Ignores any portions of lines that match the given pattern. Can specify
               |    multiple times. Example: --ignore="#*" -i "//*"
               |
               |  --package
               |    Treats dots in the old ID as Java-style package path separators and renames
               |    both package "dot names" and folder paths accordingly. For example,
               |    'reid --package abc.def abc.ghi' performs content replacement 'abc.def' ->
               |    'abc.ghi' and folder reorganization 'abc/def/xyz' -> 'abc/ghi/xyz'.
               |
               |  --partial, -p
               |    Allows partial matches within standard identifiers that start with a letter
               |    or underscore and end with an alpha-numeric character or underscore. For
               |    example, `reid --partial time date` would replace `timer` with `dater`.
               |    Note: pattern-based replacements always allow partial matches.
               |
               |  --plain
               |    Disables styled text such as bold and underline in the preview of changes.
               |
               |  --rename-cmd="console cmd"
               |    Specifies a console command to use to rename
               |
               |  --save, -s
               |    Always answers 's' (save) to the "Make changes now?" prompt.
               |
               |  --yes, -y
               |    Always answers 'y' (yes) to the "Make changes now?" prompt.
               |
               |  [wildcard_filepath]
               |    Put patterns in quotes to ensure that ReID's non-standard wildcard patterns
               |    are correctly processed. By example:
               |      "*.rogue"       # matches files in the current folder ending with ".rogue"
               |      "**/*.rogue"    # matches files in subfolders or in the current folder.
               |      "*/**/*.rogue"  # matches files in subfolders but not in the current folder
               |    Finally, '?' can be used to match any single character.

    method collect_changes( from_name:String, to_name:String, filepaths:String[] )
      changes = Changes( &include_content=options//content, &include_files=options//filepaths,
                         &is_plain=options//plain, &is_partial=options//partial,
                         &auto_response=options//auto_response, &=options )
      local replacements = changes.replacements

      if (from_name.contains('$'))
        changes.uses_patterns = true
        replacements[ from_name ] = to_name

      elseIf (options//exact or from_name.contains('/'))
        replacements[ from_name ] = to_name

      elseIf (options//package)
        # Replace package names and folder structure.
        replacements[ from_name ] = to_name
        replacements[ from_name.split('.').join("/") ] = to_name.split('.').join("/")

      else
        local has_underscore = false
        local has_uppercase  = false
        local has_lowercase  = false
        forEach (ch in from_name+to_name)
          if (ch == '_')           has_underscore = true
          elseIf (ch.is_uppercase) has_uppercase  = true
          elseIf (ch.is_lowercase) has_lowercase  = true
        endForEach

        local old_parts : String[]
        local new_parts : String[]
        if (has_underscore)
          # Maybe_Capitalized_Serpent_Case
          old_parts = from_name.split( '_' )
          new_parts = to_name.split( '_' )
          if (has_uppercase and not has_lowercase)
            # ALL_CAPS_SERPENT_CASE
            old_parts = old_parts.map<<String>>( (part)=>part.to_lowercase.capitalized )
            new_parts = new_parts.map<<String>>( (part)=>part.to_lowercase.capitalized )
          else
            # serpent_case or Capitalized_Serpent_Case
            old_parts = old_parts.map<<String>>( (part)=>part.capitalized )
            new_parts = new_parts.map<<String>>( (part)=>part.capitalized )
          endIf

        elseIf (has_uppercase)
          if (has_lowercase)
            # CamelCase
            old_parts = convert_CamelCase_to_Capitalized_Serpent_Case( from_name ).capitalized.split( '_' )
            new_parts = convert_CamelCase_to_Capitalized_Serpent_Case( to_name ).capitalized.split( '_' )
          else
            # ALLCAPS
            old_parts = [ from_name.to_lowercase.capitalized ]
            new_parts = [ to_name.to_lowercase.capitalized ]
          endIf

        else
          # allowercase
          old_parts = [ from_name.capitalized ]
          new_parts = [ to_name.capitalized ]
        endIf

        local add_camel_case_next = has_underscore
        loop 2
          if (add_camel_case_next)
            # Make CamelCase changes first so that underscores changes will overwrite
            # them and take precedence.

            # lowerCamelCase
            local oldCamelCaseParts = [old_parts[0].to_lowercase]
            if (old_parts.count >= 2) oldCamelCaseParts.add( old_parts.subset(1) )

            local newCamelCaseParts = [new_parts[0].to_lowercase]
            if (new_parts.count >= 2) newCamelCaseParts.add( new_parts.subset(1) )

            local oldCamelCase = oldCamelCaseParts.join("")
            local newCamelCase = newCamelCaseParts.join("")
            replacements[ oldCamelCase ] = newCamelCase

          else
            # serpent_case
            replacements[ old_parts.join('_').to_lowercase ] = new_parts.join('_').to_lowercase

            # ALL_CAPS_SERPENT_CASE
            replacements[ old_parts.join('_').to_uppercase ] = new_parts.join('_').to_uppercase

            # Capitalized_Serpent_Case
            replacements[ old_parts.join('_') ] = new_parts.join('_')
          endIf

          add_camel_case_next = not add_camel_case_next
        endLoop

        # Upper CamelCase added last to have priority over Capitalized_Serpent_Case
        replacements[ old_parts.join("") ] = new_parts.join("")
      endIf

      changes.create_styled_replacements

      forEach (filepath in filepaths)
        changes.collect_changes( filepath )
      endForEach

      changes.preview_and_apply

    method convert_CamelCase_to_Capitalized_Serpent_Case( text:String )->String
      local builder = String()
      local prev : Character
      forEach (ch in text)
        if (ch.is_lowercase)
          if (prev.is_uppercase)
            builder.remove_last
            if (builder.count and builder.last.is_letter) builder.print '_'
            builder.print prev
          endIf
        elseIf (ch.is_uppercase)
          if (prev.is_lowercase)
            builder.print '_'
          endIf
        endIf
        builder.print ch
        prev = ch
      endForEach
      return builder

endClass

class Changes
  PROPERTIES
    replacements           = [String:String]
    styled_replacements    = [String:String]
    file_changes           = FileChanges[]
    folders_pending_rename = [String:String]
    include_content        : Logical
    include_files          : Logical
    is_plain               : Logical
    is_partial             : Logical
    uses_patterns          : Logical
    auto_response          : String
    options                : Value
    renamed_files_count    = 0
    changed_lines_count    = 0

  METHODS
    method init( include_content, include_files, is_plain, is_partial, auto_response, options )
      if (auto_response == "") auto_response = null

    method init( file:File, options )
      # Load changes from file
      local cur_file_changes : FileChanges

      forEach (line at index in LineReader(file))
        line = line.trimmed
        if (line.count == 0 or line.begins_with('#')) nextIteration

        if (line.begins_with("replace "))
          local parts = line.after_first(' ').split("->")
          if (parts.count == 2)
            replacements[ parts.first.trimmed ] = parts.last.trimmed
          endIf

        elseIf (line.begins_with("grep "))
          local pattern = line.after_first(' ').trimmed
          replacements[ pattern ] = pattern
          options//greplace = true

        elseIf (line.begins_with("file "))
          cur_file_changes = FileChanges( this, line.after_first(' ').trimmed )
          file_changes.add( cur_file_changes )

        elseIf (line.begins_with("rename "))
          if (cur_file_changes)
            cur_file_changes.new_filepath = line.after_first(' ').trimmed
          else
            throw SyntaxError( "Syntax error on line $: 'rename' without preceding 'file'." (index+1) )
          endIf

        else
          if (line[0].is_number)
            if (not cur_file_changes)
              throw SyntaxError( "Syntax error on line $: line change without preceding 'file'." (index+1) )
            endIf
            cur_file_changes.add( line.before_first(' ')->Int32, null, line.after_first(' ').trimmed )
          else
            throw SyntaxError( "Syntax error on line $: $" (index+1,line) )
          endIf
        endIf
      endForEach

      create_styled_replacements

    method after_whitespace( text:String )->String
      local n = count_whitespace( text )
      if (n == 0) return text
      return text.rightmost( -n )

    method count_whitespace( text:String )->Int32
      local n = 0
      forEach (ch in text)
        if (ch == ' ' or ch == '\t') ++n
        else                         return n
      endForEach
      return n

    method apply_changes
      forEach (file_change in file_changes)
        file_change.apply_changes
      endForEach

      local folders = FileChanges[]
      forEach (entry in folders_pending_rename.entries)
        folders.add( FileChanges(this,entry.key,entry.value) )
      endForEach
      folders.sort( (a,b) => (a.filepath.count > b.filepath.count) ) # rename longest first

      forEach (folder in folders)
        if (File(folder.filepath).is_folder)
          # If it doesn't exist then it's already been incidentally handled by a subfolder that was moved
          println "Reorganizing $ -> $" (folder.filepath,folder.new_filepath)

          local files = Files( folder.filepath, "**", &!ignore_hidden )
          files.sync_to( File(folder.new_filepath), &keep_unused, &verbose )
          forEach (old_filepath in files)
            println "> Delete old copy of " + old_filepath
            File( old_filepath ).delete
          endForEach

          local unused_path = folder.filepath
          while (unused_path != "" and File(unused_path).listing.is_empty)
            println "> Delete " + unused_path
            File( unused_path ).delete
            unused_path = File( unused_path ).folder
          endWhile
        endIf
      endForEach

      if (renamed_files_count)
        println "$ renamed" ("# file".pluralized(renamed_files_count))
      endIf
      if (changed_lines_count)
        println "$ changed" ("# line".pluralized(changed_lines_count))
      endIf

    method grep( text:String )->Logical
      forEach (pattern in options//ignore)
        local span = text.locate_pattern( pattern )
        if (span)
          if (grep(text.leftmost(span.value.index))) return true
          if (grep(text.unleft(span.value.limit)))   return true
          return false
        endIf
      endForEach

      local cur_replacements = replacements
      if (uses_patterns)
        forEach (key in cur_replacements.keys)
          if (text.contains_pattern(key)) return true
        endForEach
      else
        forEach (key in cur_replacements.keys)
          if (text.contains(key)) return true
        endForEach
      endIf
      return false

    method apply_replacements( text:String, &styled )->String
      forEach (pattern in options//ignore)
        local span = text.locate_pattern( pattern )
        if (span)
          local left  = text.leftmost( span.value.index )
          local mid   = text.substring( span.value )
          local right = text.unleft( span.value.limit )
          return apply_replacements(left,&=styled) + mid + apply_replacements(right,&=styled)
        endIf
      endForEach

      local cur_replacements = which{ styled:styled_replacements || replacements }
      if (uses_patterns)
        forEach (key in cur_replacements.keys)
          text = text.replacing_pattern( key, cur_replacements[key] )
        endForEach
      else
        forEach (key in cur_replacements.keys)
          text = replace( text, key, cur_replacements[key] )
        endForEach
      endIf
      return text

    method replace( text:String, look_for:String, replace_with:String )->String
      if (is_partial) return text.replacing( look_for, replace_with )

      if (look_for == "") return text

      local is_id_start = look_for[0].is_identifier_start
      local is_id_end   = look_for.last.is_identifier
      if (not (is_id_start or is_id_end))
        return text.replacing( look_for, replace_with )
      endIf

      local i1 = text.locate( look_for )
      if (not i1.exists) return text

      local i0 = 0

      local buffer = String( Int32(text.count*1.1) )
      while (i1.exists)
        forEach (i in i0..<i1.value) buffer.print( text[i] )
        i0 = i1.value + look_for.count
        contingent
          local is_partial_start = (is_id_start and i1.value > 0 and text[i1.value-1].is_identifier)
          necessary (not is_partial_start)
          sufficient (not is_id_end)
          sufficient (i0 == text.count)
          local is_partial_end = (is_id_end and text[i0].is_identifier)
          necessary (not is_partial_end)
        satisfied
          buffer.print( replace_with )  # change the full match
        unsatisfied
          buffer.print( look_for )  # don't change the partial match
        endContingent
        i1 = text.locate( look_for, i0 )
      endWhile

      forEach (i in i0..<text.count) buffer.print( text[i] )

      return buffer

    method collect_changes( filepath:String )
      local changes : FileChanges

      if (options//grep)
        if (grep(filepath))
          changes = FileChanges( this, filepath, filepath )
        endIf

        if (include_content and File(filepath).is_valid_utf8)
          forEach (line at index in LineReader(File(filepath)))
            if (grep(line))
              if (not changes) changes = FileChanges( this, filepath )
              changes.add( index+1, line, after_whitespace(line) )
            endIf
          endForEach
        endIf

      else
        local updated_filepath = apply_replacements( filepath )
        if (include_files and updated_filepath != filepath)
          changes = FileChanges( this, filepath, updated_filepath )
        endIf

        if (include_content and File(filepath).is_valid_utf8)
          forEach (line at index in LineReader(File(filepath)))
            local updated_line = apply_replacements( line )
            if (updated_line != line)
              if (not changes) changes = FileChanges( this, filepath )
              changes.add( index+1, line, after_whitespace(updated_line) )
            endIf
          endForEach
        endIf

      endIf

      if (changes) file_changes.add( changes )

    method create_styled_replacements
      forEach (key in replacements.keys)
        if (is_plain)
          styled_replacements[ key ] = replacements[ key ]
        else
          styled_replacements[ key ] = "$$$" (ConsoleStyle.string(ConsoleStyle.UNDERLINE),
                                       replacements[key], ConsoleStyle.string(ConsoleStyle.UNDERLINE_OFF))
        endIf
      endForEach

    method preview_and_apply
      if (options//grep)
        forEach (key in replacements.keys)
          println "grep $" (key)
        endForEach
        println
      elseIf (not options//greplace)
        forEach (key in replacements.keys)
          println "replace $ -> $" (key,replacements[key])
        endForEach
        println
      endIf

      if (file_changes.is_empty)
        println "*** No changes required; no IDs match search patterns. ***"
        return
      endIf

      println "# REID PENDING CHANGES"
      print   (((forEach in file_changes)->String(&styled)).[flush])

      local cmd : String
      if (options//grep)
        println @|Review the matching lines above and then choose whether to save or not.
                 |  y            - Save changes to default filepath "ReIDChanges.txt". Then edit as
                 |                 desired, deleting or modifying listed lines, and then run
                 |                 e.g. "reid ReIDChanges.txt".
                 |  s filepath   - Save changes to named filepath. Then edit as desired, deleting
                 |                 or modifying listed lines, and then run e.g.
                 |                 "reid ReIDChanges.txt".
                 |  n            - No save performed.
                 |
        cmd = which{ auto_response || Console.input( "Save matches (y/s/n)? " ) }
      else
        println @|Review the changes above and then choose whether to proceed with changes (y/s/n):
                 |  y            - Indicated changes will be performed.
                 |  s [filepath] - Save changes to filepath (default: "ReIDChanges.txt"). Then edit as
                 |                 desired, deleting or modifying listed changes, and then run
                 |                 e.g. "reid ReIDChanges.txt".
                 |  n            - No changes performed.
                 |
                 |*** CAUTION: Consider backing up listed files before proceeding. ***
                 |
        cmd = which{ auto_response || Console.input( "Make changes now (y/s/n)? " ) }
      endIf

      local choice = cmd.before_first(' ')
      if (choice.count == 0) choice = "n"
      else                   choice = choice.to_lowercase

      if (options//grep and choice == "y") choice = "s"

      which (choice)
        case "y"
          println
          println "Applying changes..."
          println
          apply_changes

        case "s"
          local filename = cmd.after_first(' ').trimmed
          if (filename == "") filename = "ReIDChanges.txt"
          contingent
            if (File(filename).exists and not auto_response)
              necessary (Console.input(''*** A file named "$" already exists. Overwrite it (y/n)? ''(filename)).to_lowercase == "y")
            endIf

            local builder = String()

            if (options//grep)
              forEach (key in replacements.keys)
                builder.println "grep $" (key)
              endForEach
              builder.println
            else
              forEach (key in replacements.keys)
                builder.println "replace $ -> $" (key,replacements[key])
              endForEach
              builder.println
            endIf

            builder.println (forEach in file_changes)
            File( filename ).save( builder )
            println ''Saved "$". Edit as desired and then run 'reid "$"'.'' (filename,filename)
          unsatisfied
            println "Save aborted."
          endContingent
        others
          println "No changes made."
          System.exit 1
      endWhich

endClass

class FileChanges
  PROPERTIES
    changes      : Changes
    filepath     : String
    new_filepath : String
    line_changes = LineChange[]

  METHODS
    method init( changes, filepath, new_filepath=null )
      if (new_filepath is filepath)
        new_filepath = null
      elseIf (new_filepath and 0 == new_filepath.compare_to(filepath,&ignore_case))
        Console.error.println "=" * 79
        local mesg =
        ''ERROR renaming $ -> $\n\n'' (filepath,new_filepath) +
          ''Cannot rename filepaths that only differ in capitalization. Either use the '' +
          ''--content flag to skip filepath renaming or perform a two-step reid. For '' +
          ''example, "reid xyz temp && reid temp XYZ".\n''
        Console.error.println mesg.word_wrapped(79)
        Console.error.println "=" * 79
        System.exit 1
      endIf

    method add( line:Int32, old_content:String, new_content:String )
      line_changes.add( LineChange(changes,line,old_content,new_content) )

    method apply_changes
      if (line_changes.count)
        println filepath
        println "> Replace identifiers"
        line_changes.sort( (a,b)=>(a.line < b.line) )

        local builder = String()
        forEach (line at index in LineReader(File(filepath)))
          if (line_changes.count and line_changes.first.line-1 == index)
            # Replace this line
            local ws = changes.count_whitespace( line )
            builder.println( line.leftmost( ws ) + line_changes.remove_first.new_content )
            ++changes.changed_lines_count
          else
            builder.println( line )
          endIf
        endForEach

        File( filepath ).save( builder )
      endIf

      if (new_filepath)
        if (is_folder)
          changes.folders_pending_rename[ filepath ] = new_filepath

        else
          if (File(filepath).filename != File(new_filepath).filename)
            # Just rename the actual file for now and queue any different paths
            # for renaming later.
            local dest_filepath = File( new_filepath ).filename
            if (File(filepath).folder != "")
              dest_filepath = "$/$" (File(filepath).folder,dest_filepath)
            endIf

            println "> Rename $ -> $" (filepath,dest_filepath)
            File(filepath).rename( File(dest_filepath) )
            ++changes.renamed_files_count
          endIf

          local old_path = File( filepath ).folder
          local new_path = File( new_filepath ).folder
          if (old_path != new_path) changes.folders_pending_rename[ old_path ] = new_path

        endIf
      endIf

      println

    method bolded( text:String )->String
      if (changes.is_plain) return text
      return ConsoleStyle.string(ConsoleStyle.BOLD)+ text + ConsoleStyle.string(ConsoleStyle.BOLD_OFF)

    method is_folder->Logical
      return File( filepath ).is_folder

    method to->String
      return this->String( false )

    method to->String( styled:Logical )
      local builder = String()
      if (styled) builder.println "file    " + bolded(filepath)
      else        builder.println "file    " + filepath
      if (new_filepath)
        if (styled) builder.println "rename  " + bolded(changes.apply_replacements(filepath,&styled))
        else        builder.println "rename  " + new_filepath
      endIf

      if (line_changes.count)
        (forEach in line_changes).print( builder, &=styled )
      endIf
      builder.println

      return builder
endClass

class LineChange( changes:Changes, line:Int32, old_content:String, new_content:String ) [compound]
  METHODS
    method print( builder:String, &styled )
      if (styled and old_content)
        builder.print line.format("06")
        builder.print "  "
        builder.println( changes.after_whitespace( changes.apply_replacements(old_content,&styled) ) )
      else
        builder.println "$  $" (line.format("06"), new_content)
      endIf

    method to->String
      return "$  $" (line.format("06"),new_content)
endClass

class SyntaxError : Error;
